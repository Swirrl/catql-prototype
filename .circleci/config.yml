# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

orbs:
  aws-cli: circleci/aws-cli@3.1.5
  gcp-cli: circleci/gcp-cli@3.1.0
  terraform: circleci/terraform@3.2.1

executors:
  clojure-executor:
    docker:
      - image: rosado/ci-clojure-hurl:1.11.1
        auth:
          username: $DOCKERHUB_USERNAME # can specify string literal values
          password: $DOCKERHUB_PASSWORD # or project environment variable reference
  hurl-executor:
    docker:
      - image: ghcr.io/orange-opensource/hurl:latest


# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  test-graphql-service:
    executor: clojure-executor
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      - checkout
      - run:
          name: "Test GraphQL Service"
          command: "cd datahost-graphql && clojure -X:test"
          project-dir: datahost-graphql
      - store_test_results:
          project-dir: datahost-graphql
          path: datahost-graphql/test-results

  test-ld-openapi-service:
    executor: clojure-executor
    steps:
      - checkout
      - run:
          name: "Test LD Open API Service"
          command: "cd datahost-ld-openapi && clojure -X:dev:test"
          project-dir: datahost-ld-openapi
      - store_test_results:
          project-dir: datahost-ld-openapi
          path: datahost-ld-openapi/test-results

  build-docker-image:
    executor: clojure-executor
    parameters:
      service:
        description: Service to deploy
        type: enum
        enum: ["graphql", "ldapi"]
      project_dir:
        type: enum
        enum: ["datahost-graphql", "datahost-ld-openapi"]
    steps:
      - checkout
      - when:
          condition:
            eq: ["ldapi", << parameters.service >>]
          steps:
            - run: 
                command: "clojure -T:build docker :image-type :registry :to :remote > << parameters.service >>_container_digest"
                working_directory: << parameters.project_dir >>
      - when:
          condition:
            eq: ["graphql", << parameters.service >>]
          steps:
            - run:
                command: "clojure -T:build docker :image-type :registry > << parameters.service >>_container_digest"
                working_directory: << parameters.project_dir >>
      - persist_to_workspace:
          root: << parameters.project_dir >>
          paths:
            - << parameters.service >>_container_digest

  deploy-service:
    parameters:
      service:
        description: Service to deploy
        type: enum
        enum: ["graphql", "ldapi"]
      env:
        type: string
        description: Terraform environment to deploy
    docker:
      - image: cimg/base:2023.05
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - terraform/install:
          terraform_version:  1.4.6
      - aws-cli/setup:
          role-arn: 'arn:aws:iam::557197822758:role/circleci-datahost'
          session-duration: '900'
      - gcp-cli/setup:
          version: latest
          use_oidc: true
      - run:
          command: gcloud version
      - run:
          command: terraform init
          working_directory: deploy/terraform/<< parameters.service >>/environments/<< parameters.env >>
      - run:
          command: terraform get
          working_directory: deploy/terraform/<< parameters.service >>/environments/<< parameters.env >>
      - run:
          command: terraform plan -out update.tfplan -var digest=$(cat /tmp/workspace/<< parameters.service >>_container_digest)
          working_directory: deploy/terraform/<< parameters.service >>/environments/<< parameters.env >>
      - run:
          command: terraform apply update.tfplan
          working_directory: deploy/terraform/<< parameters.service >>/environments/<< parameters.env >>

  ldapi-blackbox-test: # this runs against a running instance
    parameters:
      env:
        type: string
        description: Terraform environment the service was deployed to.
    executor: hurl-executor
    steps:
      - checkout
      - run:
          name: "Get hostname from terraform config for the passed 'env' param"
          command: |
            echo Extracting host name
            TF_FILE=deploy/terraform/ldapi/environments/<< parameters.env >>/main.tf
            grep -e "\shost =" -e "\szone =" $TF_FILE | \
             sed 's/ //g' | \
             sed 's/"//g' | \
             awk -F"=" '/^host=/{host=$2} /^zone=/{zone=$2} END{print host "." zone}' > HOSTNAME
      - run:
          name: "Run the hurl scripts"
          working_directory: datahost-ld-openapi
          command: |
            echo "running hurl against host: $(cat ../HOSTNAME)"
            hurl --variable scheme=https \
                 --variable host_name=$(cat ../HOSTNAME) \
                 --variable series="series-$(date '+%Y-%m-%d')-$((RANDOM))" \
              bin/hurl-data/minimal.hurl
  ldapi-blackbox-ci-test: # runs ldapi service + container with hurl
    parameters:
      commit_sha:
        type: string
        description: SHA of the git commit used as docker image tag.
    docker:
      - image: ghcr.io/orange-opensource/hurl:latest
      - image: europe-west2-docker.pkg.dev/swirrl-devops-infrastructure-1/public/datahost-ld-openapi:<< parameters.commit_sha >>
        environment:
          LD_API_DATA_DIR: ./DATA
          LD_API_FILE_DIR: ./FILES
          CI: true
          GCLOUD_PROJECT: none
          BASIC_AUTH_PASSWORD_SECRET_NAME: none
    steps:
      - checkout
      - run:
          name: wait for the service to start
          command: sleep 60
      - run:
          name: "Run the hurl scripts"
          working_directory: datahost-ld-openapi
          command: |
            echo "running hurl against host: localhost"
            hurl --variable scheme=http \
                 --variable host_name=localhost \
                 --variable auth_token="ignore" \
                 --variable series="series-$(date '+%Y-%m-%d')-$((RANDOM))" \
              bin/hurl-data/minimal.hurl
  ldapi-integration-test:
    executor: clojure-executor
    steps:
      - checkout
      - run:
          name: Run integration tests
          working_directory: datahost-ld-openapi
          command: |
            clojure -X:test:test-hurl
      - store_test_results:
          project-dir: datahost-ld-openapi
          path: datahost-ld-openapi/test-results

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  build-workflow:
    jobs:
      - test-graphql-service:
          context:
            - swirrl-s3-jars-consumer
            - swirrl-dockerhub-consumer
          filters:  # required since `deploy` has tag filters AND requires `test`
            tags:
              only: /.*/
      - test-ld-openapi-service:
          context:
            - swirrl-s3-jars-consumer
            - swirrl-dockerhub-consumer
          filters: # required since `deploy` has tag filters AND requires `test`
            tags:
              only: /.*/
      - build-docker-image:
          context:
            - swirrl-s3-jars-consumer
            - swirrl-dockerhub-consumer
            - gcp-artifact-registry
          service: graphql
          project_dir: datahost-graphql
          name: build-docker-image-graphql
          filters:
            tags:
              only: /^v.*/
            # branches:
            #   ignore: /.*/
          requires:
            - test-graphql-service
      - buld-docker-image: # deploy-ld-openapi-service:
          context:
            - swirrl-s3-jars-consumer
            - swirrl-dockerhub-consumer
            - gcp-artifact-registry
          service: ldapi
          project_dir: datahost-ld-openapi
          filters:
            # tags:
            #   only: /^v.*/
            branches:
              only: rs/issue-276-ci
          name: build-docker-image-ldapi
          requires:
            - test-ld-openapi-service
      - deploy-service:
          context:
            - swirrl-ons-datahost-gcloud
          requires:
            - build-docker-image-graphql
          env: dev
          service: graphql
          filters:
            branches:
              only: main
      # - deploy-service:
      #     context:
      #       - swirrl-ons-datahost-gcloud
      #     requires:
      #       - build-docker-image-ldapi
      #     name: deploy-service-ldapi-dev
      #     env: dev
      #     service: ldapi
      #     filters:
      #       branches:
      #         only: main
      # - ldapi-blackbox-test:
      #     context:
      #       - swirrl-datahost-dev-client
      #     requires:
      #       - deploy-service-ldapi-dev
      #     env: dev
      #     filters:
      #       branches:
      #         only: main
      - ldapi-blackbox-ci-test:
          requires:
            - build-docker-image-ldapi
            #- deploy-ldapi-vm-dev
          commit_sha: << pipeline.git.revision >>
          #commit_sha: 1b60efd
          filters:
            branches:
              only: rs/issue-276-ci
      - ldapi-integration-test:
          requires:
            - test-ld-openapi-service
      - deploy-service:
          context:
            - swirrl-ons-datahost-gcloud
          requires:
            - build-docker-image-graphql
          env: ons
          service: graphql
          filters:
            branches:
              only: ons
      # - deploy-service:
      #     context:
      #       - swirrl-ons-datahost-gcloud
      #     requires:
      #       - build-docker-image-ldapi
      #     env: ons
      #     service: ldapi
      #     filters:
      #       branches:
      #         only: ons
